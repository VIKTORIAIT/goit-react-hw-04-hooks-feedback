{"version":3,"sources":["component/Statistics/Statistics.module.css","component/FeedbackOptions/FeedbackOptions.module.css","component/Notification/Notification.module.css","App.module.css","component/FeedbackOptions/FeedbackOptions.jsx","component/Statistics/Statistics.jsx","component/Section/Section.jsx","component/Notification/Notification.jsx","App.jsx","index.js"],"names":["module","exports","FeedbackOptions","onLeaveFeedback","className","s","btnList","btnItem","id","onClick","btn","type","Statistics","good","neutral","bad","total","positivePercentage","list","item","text","span","String","Section","title","children","mainTitle","Notification","message","App","state","countTotalFeedback","console","log","incrGood","ev","setState","prevState","target","Math","ceil","container","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761f5915.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list___SNzs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__3jrUb\",\"btnList\":\"FeedbackOptions_btnList__D6UMW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__l5-Wz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import s from './FeedbackOptions.module.css';\n// import PropTypes from 'prop-types'\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  return (\n    <ul className={s.btnList}>\n      <li className={s.btnItem}>\n        <button\n          id=\"good\"\n          onClick={onLeaveFeedback}\n          className={s.btn}\n          type=\"button\"\n        >\n          Good\n        </button>\n      </li>\n      <li className={s.btnItem}>\n        <button\n          id=\"neutral\"\n          onClick={onLeaveFeedback}\n          className={s.btn}\n          type=\"button\"\n        >\n          Neutral\n        </button>\n      </li>\n      <li className={s.btnItem}>\n        <button\n          id=\"bad\"\n          onClick={onLeaveFeedback}\n          className={s.btn}\n          type=\"button\"\n        >\n          Bad\n        </button>\n      </li>\n    </ul>\n  );\n};\n\n// FeedbackOptions.propTypes = {\n\n// }\n\nexport default FeedbackOptions;\n\n// { options, onLeaveFeedback }\n","// import PropTypes from 'prop-types'\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <ul className={s.list}>\n        <li className={s.item}>\n          <p className={s.text}>\n            Good: <span className={s.span}>{good}</span>\n          </p>\n        </li>\n        <li className={s.item}>\n          <p className={s.text}>\n            Neutral: <span className={s.span}>{neutral}</span>\n          </p>\n        </li>\n        <li className={s.item}>\n          <p className={s.text}>\n            Bad: <span className={s.span}>{bad}</span>\n          </p>\n        </li>\n        <li className={s.item}>\n          <b className={s.text}>\n            Total: <span className={s.span}>{total}</span>\n          </b>\n        </li>\n        <li className={s.item}>\n          <b className={s.text}>\n            Positive feedback:\n            <span className={s.span}>\n              {String(positivePercentage) === 'NaN'\n                ? 100\n                : String(positivePercentage)}\n              %\n            </span>\n          </b>\n        </li>\n      </ul>\n    </>\n  );\n};\n\n// Statistics.propTypes = {\n\n// }\n\nexport default Statistics;\n\n// {good, neutral, bad, total, positivePercentage}\n\n// {`${if (positivePercentage === NaN) 100%;\n//   positivePercentage%}`}\n","import s from './Section.module.css';\n// import PropTypes from 'prop-types'\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2 className={s.mainTitle}>{title}</h2>\n      {children}\n    </>\n  );\n};\n\n// Section.propTypes = {\n\n// }\n\nexport default Section;\n","import s from './Notification.module.css';\n// import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p className={s.message}>{message}</p>\n    </>\n  );\n};\n\n// Notification.propTypes = {};\n\nexport default Notification;\n","import { Component } from 'react';\nimport FeedbackOptions from './component/FeedbackOptions';\nimport Statistics from './component/Statistics';\nimport Section from './component/Section';\nimport Notification from './component/Notification';\nimport s from './App.module.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    console.log('работает sum');\n    const sum = this.state.good + this.state.neutral + this.state.bad;\n    return sum;\n  };\n\n  incrGood = ev =>\n    this.setState(prevState => {\n      if (ev.target.id === 'good') {\n        return { good: prevState.good + 1 };\n      }\n      if (ev.target.id === 'neutral') {\n        return { neutral: prevState.neutral + 1 };\n      }\n      if (ev.target.id === 'bad') {\n        return { bad: prevState.bad + 1 };\n      }\n    });\n\n  positivePercentage = () =>\n    Math.ceil((this.state.good * 100) / this.countTotalFeedback());\n\n  render() {\n    return (\n      <div className={s.container}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            // options={options}\n            onLeaveFeedback={this.incrGood}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {String(this.countTotalFeedback()) !== '0' ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.positivePercentage()}\n            />\n          ) : (\n            <Notification message={'There is no feedback.'} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}